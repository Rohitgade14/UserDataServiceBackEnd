package com.spcodage.config;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Service;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.List;

@Service
public class JwtService1 {

    private static final String SECRET_KEY = "YXNzc3NoaGRhc3Nzc2hoZGFzc3Nzc2hoZGFzc3Nzc2hoZGE=";
    private static final long ACCESS_TOKEN_EXPIRATION = 5 * 60 * 1000;   // 5 minutes
    private static final long REFRESH_TOKEN_EXPIRATION = 24 * 60 * 60 * 1000; // 24 hours

    private SecretKey getKey() {
        return Keys.hmacShaKeyFor(Decoders.BASE64.decode(SECRET_KEY));
    }

    // Generate access or refresh token
    public String generateToken(CustomUserDetails customUser, boolean isAccessToken) {
        long expirationMs = isAccessToken ? ACCESS_TOKEN_EXPIRATION : REFRESH_TOKEN_EXPIRATION;

        // Extract roles
        List<String> roles = customUser.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .map(auth -> auth.replace("ROLE_", "")) // remove prefix
                .toList();

        // ✅ Create claims (old JJWT syntax)
        Claims claims = Jwts.claims();
        claims.put("email", customUser.getUsername());
        claims.put("roles", roles);

        // ✅ Build token using setClaims(), setSubject(), etc.
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(customUser.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expirationMs))
                .signWith(getKey())
                .compact();
    }

    // Extract username
    public String getUsernameFromToken(String token) {
        Jws<Claims> jwsClaims = Jwts.parserBuilder()
                .setSigningKey(getKey())
                .build()
                .parseClaimsJws(token);

        return jwsClaims.getBody().getSubject();
    }

    // Validate token signature & expiry
    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder()
                    .setSigningKey(getKey())
                    .build()
                    .parseClaimsJws(token);
            return true;
        } catch (JwtException ex) {
            return false;
        }
    }

    // Validate token and username
    public boolean validateToken(String token, String username) {
        try {
            String tokenUsername = getUsernameFromToken(token);
            return tokenUsername.equals(username) && !isTokenExpired(token);
        } catch (JwtException ex) {
            return false;
        }
    }

    // Check if expired
    private boolean isTokenExpired(String token) {
        try {
            Jws<Claims> jwsClaims = Jwts.parserBuilder()
                    .setSigningKey(getKey())
                    .build()
                    .parseClaimsJws(token);

            Date expiration = jwsClaims.getBody().getExpiration();
            return expiration.before(new Date());
        } catch (JwtException ex) {
            return true;
        }
    }
}


✅ replace parserBuilder().setSigningKey() with parser().verifyWith()
//old
- Claims claims = Jwts.claims();
- claims.put("email", user.getUsername());
- claims.put("roles", roles);

//new way
+ Claims claims = Jwts.claims()
+     .add("email", user.getUsername())
+     .add("roles", roles)
+     .build();

- Jwts.parserBuilder().setSigningKey(getKey()).build().parseClaimsJws(token);
+ Jwts.parser().verifyWith(getKey()).build().parseSignedClaims(token);
